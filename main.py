from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from database import Session, Product, Cart
import os
from dotenv import load_dotenv
import logging
import asyncio
from typing import Dict, List, Optional
from io import BytesIO
from PIL import Image
import aiohttp
import concurrent.futures
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
YOUR_TELEGRAM_TAG = os.getenv("YOUR_TELEGRAM_TAG", "@your_username")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
image_cache = {}
executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict] = {}

def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üèé –ú–µ–π–Ω –º–æ–¥–µ–ª–∏"),
             types.KeyboardButton(text="üöó –°–ø–µ—Ü. —Å–µ—Ä–∏–∏")],
            [types.KeyboardButton(text="üèÅ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏"),
             types.KeyboardButton(text="üîÆ –ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏")],
            [types.KeyboardButton(text="üöö –¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
             types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
            [types.KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def get_product_keyboard(product_id: int, category: str):
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_list_{category}"),
             types.InlineKeyboardButton(text="‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}")]
        ]
    )

class OrderStates(StatesGroup):
    waiting_phone = State()
    waiting_payment_info = State()

class AddProduct(StatesGroup):
    waiting_photo = State()
    waiting_name = State()
    waiting_price = State()
    waiting_description = State()
    waiting_category = State()

class DeleteProduct(StatesGroup):
    waiting_id = State()

async def delete_previous_messages(chat_id: int, message_ids: List[int]):
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def download_image(session: aiohttp.ClientSession, url: str) -> Optional[Image.Image]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if url in image_cache:
        return image_cache[url]
    
    try:
        start_time = time.time()
        async with session.get(url) as response:
            if response.status == 200:
                image_data = await response.read()
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {url} –∑–∞ {time.time()-start_time:.2f} —Å–µ–∫")
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                loop = asyncio.get_running_loop()
                image = await loop.run_in_executor(
                    executor,
                    lambda: Image.open(BytesIO(image_data))
                )
                image.thumbnail((400, 400))
                
                image_cache[url] = image
                return image
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
    return None

def create_collage_sync(images: List[Image.Image]) -> BytesIO:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        start_time = time.time()
        num_images = len(images)
        cols = min(3, num_images)
        rows = (num_images + cols - 1) // cols
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_width, img_height = images[0].size
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
        collage = Image.new('RGB', (cols * img_width, rows * img_height))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–ª–ª–∞–∂
        for i, img in enumerate(images):
            row = i // cols
            col = i % cols
            collage.paste(img, (col * img_width, row * img_height))
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        buffer = BytesIO()
        collage.save(buffer, format='JPEG', quality=85, optimize=True)
        buffer.seek(0)
        
        logger.info(f"–ö–æ–ª–ª–∞–∂ —Å–æ–∑–¥–∞–Ω –∑–∞ {time.time()-start_time:.2f} —Å–µ–∫")
        return buffer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞: {e}")
        return None

async def create_combined_message(photo_urls: List[str], products: List[Product], category_name: str) -> Optional[tuple]:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–∞–∂–µ–º –∏ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    async with aiohttp.ClientSession() as session:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tasks = [download_image(session, url) for url in photo_urls]
        images = await asyncio.gather(*tasks)
        images = [img for img in images if img is not None]
        
        if not images:
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        products_text = f"üìã {category_name} - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:\n\n"
        for idx, product in enumerate(products, 1):
            products_text += f"{idx}. {product.name} - {product.price} —Ä—É–±.\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        collage_buffer = await loop.run_in_executor(
            executor,
            lambda: create_collage_sync(images)
        )
        
        if not collage_buffer:
            return None
            
        return collage_buffer, products_text, len(products)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hot Wheels Kriak Shop!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –≤–∞–º –º–æ–¥–µ–ª—å Hot Wheels.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text in [
    "üèé –ú–µ–π–Ω –º–æ–¥–µ–ª–∏", "üöó –°–ø–µ—Ü. —Å–µ—Ä–∏–∏", "üèÅ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏",
    "üîÆ –ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏", "üöö –¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
])
async def show_category(message: types.Message):
    category_map = {
        "üèé –ú–µ–π–Ω –º–æ–¥–µ–ª–∏": "main",
        "üöó –°–ø–µ—Ü. —Å–µ—Ä–∏–∏": "special",
        "üèÅ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏": "premium",
        "üîÆ –ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏": "zamak",
        "üöö –¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "team_transport"
    }
    
    user_id = message.from_user.id
    category = category_map[message.text]
    category_name = message.text
    
    session = Session()
    try:
        products = session.query(Product).filter(Product.category == category).all()
        
        if not products:
            await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ üò¢")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id] = {
            'category': category,
            'products': {p.id: p for p in products},
            'last_msg_ids': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        file_tasks = [bot.get_file(product.photo_id) for product in products]
        files = await asyncio.gather(*file_tasks)
        photo_urls = [f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}" for file in files]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        combined = await create_combined_message(photo_urls, products, category_name)
        
        if not combined:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫")
            await show_products_list(message, user_id)
            return
            
        collage_buffer, products_text, num_products = combined
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        buttons = []
        row = []
        for idx in range(1, num_products + 1):
            row.append(types.InlineKeyboardButton(
                text=str(idx),
                callback_data=f"product_{products[idx-1].id}"
            ))
            if idx % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                buttons.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
        
        buttons.append([types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )])
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id in user_data and user_data[user_id]['last_msg_ids']:
            await delete_previous_messages(message.chat.id, user_data[user_id]['last_msg_ids'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await message.answer_photo(
            photo=types.BufferedInputFile(collage_buffer.read(), filename="collage.jpg"),
            caption=products_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data[user_id]['last_msg_ids'] = [msg.message_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

async def show_products_list(message: types.Message, user_id: int):
    if user_id not in user_data:
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")
        return
    
    products = list(user_data[user_id]['products'].values())
    category = user_data[user_id]['category']
    category_name = {
        "main": "üèé –ú–µ–π–Ω –º–æ–¥–µ–ª–∏",
        "special": "üöó –°–ø–µ—Ü. —Å–µ—Ä–∏–∏",
        "premium": "üèÅ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏",
        "zamak": "üîÆ –ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏",
        "team_transport": "üöö –¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    }.get(category, category)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    products_text = f"üìã {category_name} - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:\n\n"
    for idx, product in enumerate(products, 1):
        products_text += f"{idx}. {product.name} - {product.price} —Ä—É–±.\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    buttons = []
    row = []
    for idx, product in enumerate(products, 1):
        row.append(types.InlineKeyboardButton(
            text=str(idx),
            callback_data=f"product_{product.id}"
        ))
        if idx % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            buttons.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        buttons.append(row)
    
    buttons.append([types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data="back_to_menu"
    )])
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_data[user_id]['last_msg_ids']:
            await delete_previous_messages(message.chat.id, user_data[user_id]['last_msg_ids'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        msg = await message.answer(
            products_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data[user_id]['last_msg_ids'] = [msg.message_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith('product_'))
async def show_product(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split('_')[1])
    
    if user_id not in user_data or product_id not in user_data[user_id]['products']:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    product = user_data[user_id]['products'][product_id]
    category = user_data[user_id]['category']
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_data[user_id]['last_msg_ids']:
            await delete_previous_messages(callback.message.chat.id, user_data[user_id]['last_msg_ids'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        msg = await callback.message.answer_photo(
            photo=product.photo_id,
            caption=f"<b>üöÄ {product.name}</b>\nüíµ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}",
            reply_markup=get_product_keyboard(product.id, category),
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data[user_id]['last_msg_ids'] = [msg.message_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('back_to_list_'))
async def back_to_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data.split('_')[-1]
    
    if user_id not in user_data or user_data[user_id]['category'] != category:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    category_name = {
        "main": "üèé –ú–µ–π–Ω –º–æ–¥–µ–ª–∏",
        "special": "üöó –°–ø–µ—Ü. —Å–µ—Ä–∏–∏", 
        "premium": "üèÅ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏",
        "zamak": "üîÆ –ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏",
        "team_transport": "üöö –¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    }.get(category, category)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_data and user_data[user_id]['last_msg_ids']:
        await delete_previous_messages(callback.message.chat.id, user_data[user_id]['last_msg_ids'])
    
    session = Session()
    try:
        products = session.query(Product).filter(Product.category == category).all()
        
        if not products:
            await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ üò¢")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]['products'] = {p.id: p for p in products}
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        file_tasks = [bot.get_file(product.photo_id) for product in products]
        files = await asyncio.gather(*file_tasks)
        photo_urls = [f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}" for file in files]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        combined = await create_combined_message(photo_urls, products, category_name)
        
        if not combined:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫")
            await show_products_list(callback.message, user_id)
            return
            
        collage_buffer, products_text, num_products = combined
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        buttons = []
        row = []
        for idx in range(1, num_products + 1):
            row.append(types.InlineKeyboardButton(
                text=str(idx),
                callback_data=f"product_{products[idx-1].id}"
            ))
            if idx % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                buttons.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
        
        buttons.append([types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await callback.message.answer_photo(
            photo=types.BufferedInputFile(collage_buffer.read(), filename="collage.jpg"),
            caption=products_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data[user_id]['last_msg_ids'] = [msg.message_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('add_'))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split('_')[1])
    
    session = Session()
    try:
        exists = session.query(Cart).filter(
            Cart.user_id == user_id,
            Cart.product_id == product_id
        ).first()
        
        if not exists:
            cart_item = Cart(user_id=user_id, product_id=product_id)
            session.add(cart_item)
            session.commit()
            await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí")
        else:
            await callback.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ üò¢")
    finally:
        session.close()

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def handle_cart_message(message: types.Message):
    await show_cart(message)

async def show_cart(message: types.Message):
    user_id = message.from_user.id
    session = Session()
    
    try:
        cart_items = session.query(Cart).filter(Cart.user_id == user_id).all()
        
        if not cart_items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí", reply_markup=get_main_keyboard())
            return
            
        total = 0
        cart_text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        
        for item in cart_items:
            product = session.query(Product).filter(Product.id == item.product_id).first()
            cart_text += f"‚Ä¢ {product.name} - {product.price} —Ä—É–±. [<a href='tg://btn/{item.id}'>‚ùå</a>]\n"
            total += product.price
        
        cart_text += f"\nüí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total} —Ä—É–±.</b>"
        
        msg = await message.answer(
            cart_text,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
                        types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
                    ]
                ]
            ),
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id in user_data:
            user_data[user_id]['last_msg_ids'] = [msg.message_id]
            
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã üò¢")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    finally:
        session.close()

@dp.callback_query(lambda c: c.data.startswith('remove_'))
async def remove_from_cart(callback: types.CallbackQuery):
    cart_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    
    session = Session()
    try:
        cart_item = session.query(Cart).filter(
            Cart.id == cart_id,
            Cart.user_id == user_id
        ).first()
        
        if cart_item:
            product_name = cart_item.product.name
            session.delete(cart_item)
            session.commit()
            await callback.answer(f"–¢–æ–≤–∞—Ä {product_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            await show_cart(callback.message)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üò¢")
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    finally:
        session.close()

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    session = Session()
    try:
        session.query(Cart).filter(Cart.user_id == user_id).delete()
        session.commit()
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí", reply_markup=get_main_keyboard())
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã üò¢")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    finally:
        session.close()

@dp.callback_query(lambda c: c.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–≥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º (@username) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(OrderStates.waiting_phone)

@dp.message(OrderStates.waiting_phone, F.contact | F.text)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        await state.clear()
        return
        
    contact = message.contact.phone_number if message.contact else message.text
    await state.update_data(contact=contact)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ –∏ —Ç.–¥.):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(OrderStates.waiting_payment_info)

@dp.message(OrderStates.waiting_payment_info)
async def process_payment_info(message: types.Message, state: FSMContext):
    payment_info = message.text
    data = await state.get_data()
    contact = data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    user_id = message.from_user.id
    user_tag = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
    
    session = Session()
    try:
        cart_items = session.query(Cart).filter(Cart.user_id == user_id).all()
        
        if not cart_items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=get_main_keyboard())
            await state.clear()
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        order_text += f"üìû –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\n"
        order_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_info}\n\n"
        order_text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_order_text = "üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
        admin_order_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_tag}\n"
        admin_order_text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\n"
        admin_order_text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_info}\n\n"
        admin_order_text += "üì¶ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        
        total = 0
        for item in cart_items:
            product = session.query(Product).filter(Product.id == item.product_id).first()
            order_text += f"‚Ä¢ {product.name} - {product.price} —Ä—É–±.\n"
            admin_order_text += f"‚Ä¢ {product.name} - {product.price} —Ä—É–±.\n"
            total += product.price
        
        order_text += f"\nüí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total} —Ä—É–±.</b>\n\n"
        order_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        
        admin_order_text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total} —Ä—É–±.</b>\n"
        admin_order_text += "\n‚úâÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!"
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        session.query(Cart).filter(Cart.user_id == user_id).delete()
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(order_text, reply_markup=get_main_keyboard())
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_order_text,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ üò¢")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
    finally:
        session.close()
        await state.clear()

@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n\n"
        f"üë®‚Äçüíª –¢–µ–≥ –¥–ª—è —Å–≤—è–∑–∏: <code>{YOUR_TELEGRAM_TAG}</code>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–≥ –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram.\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
    )
    
    await message.answer(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
        
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.waiting_photo)

@dp.message(AddProduct.waiting_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.waiting_name)

@dp.message(AddProduct.waiting_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.waiting_price)

@dp.message(AddProduct.waiting_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddProduct.waiting_description)
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@dp.message(AddProduct.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–µ–π–Ω –º–æ–¥–µ–ª–∏ (main)")],
            [types.KeyboardButton(text="–°–ø–µ—Ü. —Å–µ—Ä–∏–∏ (special)")],
            [types.KeyboardButton(text="–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ (premium)")],
            [types.KeyboardButton(text="–ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏ (zamak)")],
            [types.KeyboardButton(text="–¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (team_transport)")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(AddProduct.waiting_category)

@dp.message(AddProduct.waiting_category)
async def process_category(message: types.Message, state: FSMContext):
    category_map = {
        "–ú–µ–π–Ω –º–æ–¥–µ–ª–∏ (main)": "main",
        "–°–ø–µ—Ü. —Å–µ—Ä–∏–∏ (special)": "special",
        "–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ (premium)": "premium",
        "–ó–∞–º–∞–∫ –º–æ–¥–µ–ª–∏ (zamak)": "zamak",
        "–¢–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (team_transport)": "team_transport"
    }
    
    if message.text not in category_map:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    data = await state.get_data()
    category = category_map[message.text]
    
    session = Session()
    try:
        new_product = Product(
            category=category,
            name=data['name'],
            price=data['price'],
            photo_id=data['photo_id'],
            description=data['description']
        )
        
        session.add(new_product)
        session.commit()
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_product.name}\n"
            f"–¶–µ–Ω–∞: {new_product.price} —Ä—É–±.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    finally:
        session.close()
        await state.clear()

@dp.message(Command("delete"))
async def cmd_delete(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
        
    session = Session()
    try:
        products = session.query(Product).all()
        if not products:
            await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        products_list = "\n".join([f"{p.id}: {p.name}" for p in products])
        await message.answer(
            f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (ID: –ù–∞–∑–≤–∞–Ω–∏–µ):\n{products_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:"
        )
        await state.set_state(DeleteProduct.waiting_id)
    finally:
        session.close()

@dp.message(DeleteProduct.waiting_id)
async def process_delete_id(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        ids = message.text.split()
        deleted_products = []
        not_found_ids = []
        
        session = Session()
        
        for id_str in ids:
            try:
                product_id = int(id_str)
                product = session.query(Product).filter(Product.id == product_id).first()
                
                if product:
                    session.delete(product)
                    deleted_products.append(product.name)
                else:
                    not_found_ids.append(str(product_id))
            except ValueError:
                not_found_ids.append(id_str)
        
        session.commit()
        
        response = ""
        if deleted_products:
            response += "‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n" + "\n".join(f"‚Ä¢ {name}" for name in deleted_products) + "\n\n"
        if not_found_ids:
            response += "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å ID: " + ", ".join(not_found_ids)
            
        await message.answer(response if response else "–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=get_main_keyboard())
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    finally:
        session.close()
        await state.clear()

@dp.message(Command("myid"))
async def cmd_myid(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}\n"
                       f"–í–∞—à —Ç–µ–≥: @{message.from_user.username if message.from_user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    asyncio.run(main())